<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>教程 on 无名空间</title><link>http://xiehao.github.io/tags/%E6%95%99%E7%A8%8B/</link><description>Recent content in 教程 on 无名空间</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 31 Jan 2023 10:38:52 +0800</lastBuildDate><atom:link href="http://xiehao.github.io/tags/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>在Windows下用Scoop安装软件</title><link>http://xiehao.github.io/blogs/2023-01-31-scoop-introduction/</link><pubDate>Tue, 31 Jan 2023 10:38:52 +0800</pubDate><guid>http://xiehao.github.io/blogs/2023-01-31-scoop-introduction/</guid><description>简介 工欲善其事，必先利其器。
使用电脑从安装软件开始，目前有多种安装软件的方式，主流方式即通过下载安装包安装所需软件，不赘述；此外，亦可通过命令行方式进行。在Windows平台上常见的命令行安装方式包括 Chocolatey 与 Scoop 等，前者出现较早，限制颇多，故本文采用后者。
Scoop 是一款 Windows 平台上基于命令行的软件包管理器，类似 macOS 与 Linux 平台上的 Homebrew ，可用于管理软件的安装、卸载、更新等，具有如下特点：
简洁：纯命令行操作，可批量管理软件，无需通过访问网页方式下载安装； 省心：自动管理依赖关系、自动设置环境变量、自动识别 32/64 位； 绿色：不污染系统环境（注册表），所有相关文件（包括已安装软件与配置文件等）均在指定路径下； 便携：便于在重装系统后或在新电脑上快速恢复或迁移已安装软件（包括部分配置信息）； 丰富：除官方仓库外，尚支持第三方自定义仓库，极大程度丰富了可管理软件的种类。 安装与卸载 前提条件 系统中必须有最新版的 PowerShell 或 Windows PowerShell 5.1 及以上版本 为允许执行安装程序，PowerShell执行策略必须是以下之一：Unrestricted,RemoteSigned 或 ByPass，一般选用RemoteSigned 在 PowerShell 中输入： Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser 输入y表示同意 安装Scoop 注意：鉴于目前国内网络环境问题，若无法科学上网，可参考迁移与维护一节。
默认安装 该方式集下载、安装于一体，且安装至C:\\Users\&amp;lt;你的用户名&amp;gt;\scoop路径下。
以非管理员账户运行 PowerShell 并输入以下命令： irm get.scoop.sh | iex 若遇网络问题，可加入代理选项（亦适用于下述高级安装）： irm get.scoop.sh -Proxy &amp;#39;http://&amp;lt;IP地址:端口号&amp;gt;&amp;#39; | iex 高级安装 该方式可将各步骤拆分完成，且可自定义安装路径、权限等。
首先下载所需安装脚本并另存为scoop-installer.ps1： irm get.scoop.sh -outfile &amp;#39;scoop-installer.ps1&amp;#39; 在利用脚本安装时按需设置安装参数，如设置普通软件与全局软件的安装路径、网络代理 等信息： .</description></item><item><title>在Docker中搭建JupyterHub服务器</title><link>http://xiehao.github.io/blogs/2023-01-19-docker-jupyterhub/</link><pubDate>Thu, 19 Jan 2023 14:57:00 +0800</pubDate><guid>http://xiehao.github.io/blogs/2023-01-19-docker-jupyterhub/</guid><description>功能需求 因团队项目需要，需组建供多人同时使用的深度学习服务器一台，计划支持以下功能：
支持通过浏览器访问服务器 支持多用户同时访问，且互不干扰 支持在用户间通过共享目录合作开发 支持用户使用服务器上的独立显卡 核心思想 在Docker中开启JupyterHub服务器 由于在本机配置环境时对环境破坏较大，且不易维护，故可采用在Docker镜像中部署 传统的Jupyter Notebook乃至JupyterLab仅支持单用户访问，不满足需求，故采用支持多人访问的JupyterHub作为服务器 在服务器中为每个用户开启一个JupyterLab容器 在JupyterHub平台上为每个用户单独开启一个Docker容器 在新开启的容器中开启一个JupyterLab服务，以支持单人操作 所需软件 理论上可在任何支持Docker的软件平台上部署，本文在Manjaro Linux操作系统上部署，可通过yay安装：
git：用于版本控制 docker与docker-compose：用于承载平台服务 nvidia与nvidia-container-toolkit：用于驱动显卡并被Docker容器识别 主要步骤 克隆仓库 jupyterhub-deploy-docker至本地 git clone https://github.com/jupyterhub/jupyterhub-deploy-docker.git 自定义少量配置 修改每个用户启动jupyter notebook所用镜像为cschranz/gpu-jupyter以支持nvidia显卡 在docker-compose.yaml文件中，services的environment下将DOCKER_NOTEBOOK_IMAGE的值修改为cschranz/gpu-jupyter:latest： # JupyterHub will spawn this Notebook image for users DOCKER_NOTEBOOK_IMAGE: cschranz/gpu-jupyter:latest 设置多用户均可访问的共享文件夹/home/jovyan/shared，可在其内实现多人合作开发 在jupyterhub_config.py文件中，修改变量c.DockerSpawner.volumns的值： # Mount the real user&amp;#39;s Docker volume on the host to the notebook user&amp;#39;s # notebook directory in the container c.DockerSpawner.volumes = { &amp;#39;jupyterhub-user-{username}&amp;#39;: notebook_dir, &amp;#39;jupyterhub-shared&amp;#39;: { &amp;#39;bind&amp;#39;: &amp;#39;/home/jovyan/shared&amp;#39;, &amp;#39;mode&amp;#39;: &amp;#39;rw&amp;#39; } } 令单用户容器可访问主机显卡 在jupyterhub_config.</description></item></channel></rss>